---
esphome:
  name: anavi-light-controller

esp8266:
  board: esp12e
  restore_from_flash: true


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: !secret wifi_ssid2
    password: !secret wifi_password2

captive_portal:

# Enable logging
logger:

# When no client connects to the native API within 5 minutes a
# watchdog kicks in and reboots the device. Therefore by default
# the Home Assistant API is disabled. Enabled it only if you will
# use it.

api:
  encryption:
    key: !secret api_key

ota:
  platform: esphome
  password: !secret esp_cam_ota_password

# Please note that if an I2C sensor module is not attached ESPHome
# will report an error and the status LED will be blinking rapidly.
# To avoid this case either disable the status LED or any I2C
# sensor module that you don't plan to attach.
status_led:
  pin: GPIO16

# i2c:
#  sda: GPIO4
#  scl: GPIO5
#  scan: false

# apds9960:
#  address: 0x39
#  update_interval: 60s

# There are some known ESPHome issue with DHT22 therefore the
# model has been explicitly configured. For more details have a
# look at the notes in the documentation and the reported issues:
# https://github.com/esphome/issues/issues/792
# https://esphome.io/components/sensor/dht.html

# sensor:

#  - platform: bh1750
#    name: "BH1750 Illuminance"
#    address: 0x23
#    measurement_duration: 69
#    update_interval: 5s

#  - platform: bmp085
#    temperature:
#      name: "BMP180 Temperature"
#    pressure:
#      name: "BMP180 Pressure"
#    update_interval: 10s

#  - platform: htu21d
#    temperature:
#      name: "HTU21D Temperature"
#    humidity:
#      name: "HTU21D Humidity"
#    update_interval: 10s

# There are known "ESP8266 Various Connection Issues" when
# the binary sensor is enabled. It affects ANAVI Light Controller
# therefore by default apds9960 is disabled:
# https://github.com/esphome/issues/issues/455
# However, below is an example how to enabled it if needed:

#  - platform: apds9960
#    type: CLEAR
#    name: "APDS9960 Clear Channel"

# binary_sensor:
#  - platform: apds9960
#    direction: UP
#    name: "APDS960 Up Movement"

light:
  - platform: rgb
    name: "Anavi"
    id: anavi
    red: output_component1
    green: output_component2
    blue: output_component3
    effects:
      - pulse:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Slow Pulse"
          transition_length: 500ms
          update_interval: 2s
      - pulse:
          name: "Asymmetrical Pulse"
          transition_length:
            on_length: 1s
            off_length: 500ms
          update_interval: 1.5s
      - lambda:
          name: Slow Rainbow
          update_interval: 16s
          lambda: |-
            static int state = 0;
            auto call = id(anavi).turn_on();
            call.set_transition_length(15000);
            if (state == 0) {
              call.set_rgb(1.0, 0.0, 0.0);
            } else if (state == 1) {
              call.set_rgb(1.0, 0.5, 0.0);
            } else if (state == 2) {
              call.set_rgb(1.0, 1.0, 0.0);
            } else if (state == 3) {
              call.set_rgb(0.5, 1.0, 0.0);
            } else if (state == 4) {
              call.set_rgb(0.0, 1.0, 0.0);
            } else if (state == 5) {
              call.set_rgb(0.0, 1.0, 0.5);
            } else if (state == 6) {
              call.set_rgb(0.0, 1.0, 1.0);
            } else if (state == 7) {
              call.set_rgb(0.0, 0.5, 1.0);
            } else if (state == 8) {
              call.set_rgb(0.0, 0.0, 1.0);
            } else if (state == 9) {
              call.set_rgb(0.5, 0.0, 1.0);
            } else if (state == 10) {
              call.set_rgb(1.0, 0.0, 1.0);
            } else if (state == 11) {
              call.set_rgb(1.0, 0.0, 0.5);
            }
            call.perform();
            state++;
            if (state == 12)
              state = 0;


# Example output entry
output:
  - platform: esp8266_pwm
    id: output_component1
    pin: GPIO12
    max_power: 80%

  - platform: esp8266_pwm
    id: output_component2
    pin: GPIO13
    max_power: 80%

  - platform: esp8266_pwm
    id: output_component3
    pin: GPIO14
    max_power: 80%
